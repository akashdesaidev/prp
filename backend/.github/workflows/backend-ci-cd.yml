name: Backend CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [main]
    paths:
      - 'backend/**'

env:
  NODE_VERSION: '20'
  MONGODB_VERSION: '7.0'

jobs:
  # ==================== TESTING & QUALITY CHECKS ====================
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run ESLint
        working-directory: ./backend
        run: npm run lint

      - name: Run Tests
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/prp-test
          JWT_SECRET: test-jwt-secret-key-for-ci-pipeline
          JWT_REFRESH_SECRET: test-refresh-secret-key-for-ci

      - name: Run Security Audit
        working-directory: ./backend
        run: npm audit --audit-level=high

      - name: Upload Test Coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend
          flags: backend
          name: backend-coverage

  # ==================== BUILD ====================
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        working-directory: ./backend
        run: npm ci --only=production

      - name: Create Production Build
        working-directory: ./backend
        run: npm run build

      - name: Archive Production Build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: |
            backend/
            !backend/node_modules
            !backend/.git
            !backend/tests
            !backend/*.test.js
          retention-days: 30

  # ==================== DEPLOY TO STAGING ====================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
          working-directory: ./backend
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: |
            prp-api-staging.vercel.app

      - name: Run Staging Health Check
        run: |
          sleep 30
          curl -f https://prp-api-staging.vercel.app/api/health || exit 1

  # ==================== DEPLOY TO PRODUCTION ====================
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: backend-build

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
          working-directory: ./backend
          scope: ${{ secrets.VERCEL_ORG_ID }}
          vercel-args: '--prod'
          alias-domains: |
            prp-api.vercel.app

      - name: Run Production Health Check
        run: |
          sleep 30
          curl -f https://prp-api.vercel.app/api/health || exit 1

      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'üöÄ Backend deployed to production successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: success()

      - name: Notify Deployment Failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#deployments'
          text: '‚ùå Backend deployment to production failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: failure()

  # ==================== SECURITY SCANNING ====================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/package.json

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript
