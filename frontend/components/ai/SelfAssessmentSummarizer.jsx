'use client';

import { useState } from 'react';
import { Button } from '../ui/button';
import { FileText, Loader2, X } from 'lucide-react';
import api from '../../lib/api';
import toast from 'react-hot-toast';

export default function SelfAssessmentSummarizer({ responses, disabled = false, className = '' }) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [summary, setSummary] = useState('');
  const [showSummary, setShowSummary] = useState(false);

  const handleGenerateSummary = async () => {
    if (!responses || responses.length === 0) {
      toast.error('No responses to summarize');
      return;
    }

    // Filter out empty responses
    const validResponses = responses.filter((r) => r.response && r.response.trim().length > 0);

    if (validResponses.length === 0) {
      toast.error('Please provide some responses before generating a summary');
      return;
    }

    try {
      setIsGenerating(true);

      const response = await api.post('/ai/summarize-assessment', {
        responses: validResponses.map((r) => ({
          question: r.questionText || r.question || 'Question',
          response: r.response
        }))
      });

      if (response.data.success) {
        setSummary(response.data.data.summary);
        setShowSummary(true);
        toast.success('Summary generated successfully!');
      } else {
        toast.error('Failed to generate summary');
      }
    } catch (error) {
      console.error('Error generating summary:', error);

      if (error.response?.status === 503) {
        toast.error('AI services are temporarily unavailable. Please try again later.');
      } else {
        toast.error(error.response?.data?.message || 'Failed to generate summary');
      }
    } finally {
      setIsGenerating(false);
    }
  };

  const closeSummary = () => {
    setShowSummary(false);
    setSummary('');
  };

  return (
    <>
      <Button
        type="button"
        variant="outline"
        onClick={handleGenerateSummary}
        disabled={disabled || isGenerating}
        className={`flex items-center gap-2 ${className}`}
      >
        {isGenerating ? (
          <>
            <Loader2 className="h-4 w-4 animate-spin" />
            Generating Summary...
          </>
        ) : (
          <>
            <FileText className="h-4 w-4" />
            Summarize
          </>
        )}
      </Button>

      {/* Summary Modal */}
      {showSummary && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-gray-900">AI-Generated Summary</h3>
                <button onClick={closeSummary} className="text-gray-400 hover:text-gray-600">
                  <X className="h-6 w-6" />
                </button>
              </div>

              <div className="prose max-w-none">
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                  <div className="flex items-center gap-2 mb-2">
                    <FileText className="h-5 w-5 text-blue-600" />
                    <span className="font-medium text-blue-900">AI Summary</span>
                  </div>
                  <div className="text-gray-700 whitespace-pre-wrap">{summary}</div>
                </div>

                <p className="text-sm text-gray-500 italic">
                  This summary was generated by AI based on your responses. Please review and use it
                  as a starting point for your self-reflection.
                </p>
              </div>

              <div className="flex justify-end mt-6">
                <Button onClick={closeSummary}>Close</Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
